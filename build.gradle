plugins {
    id 'java-library'
}

group = 'com.blackberry'
version = '2.4'
description = 'jwt-editor'

repositories {
    mavenCentral()
    maven { url = uri('https://www.jetbrains.com/intellij-repository/releases') }
    maven { url = uri('https://packages.jetbrains.team/maven/p/ij/intellij-dependencies/') }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    guiGenerationTask
}

dependencies {
    guiGenerationTask(
            "com.jetbrains.intellij.java:java-compiler-ant-tasks:${gui_designer_version}"
    )
    compileOnly(
            "org.bouncycastle:bcprov-jdk18on:${bouncycastle_version}",
            "org.bouncycastle:bcpkix-jdk18on:${bouncycastle_version}",
            "net.portswigger.burp.extensions:montoya-api:${extender_version}"
    )
    api(
            "com.jetbrains.intellij.java:java-gui-forms-rt:${gui_designer_version}",
            'com.nimbusds:nimbus-jose-jwt:9.21',
            'org.exbin.deltahex:deltahex-swing:0.1.2',
            'com.fifesoft:rsyntaxtextarea:3.5.3',
            'org.json:json:20240303'
    )
    testImplementation(
            "org.bouncycastle:bcprov-jdk18on:${bouncycastle_version}",
            "org.bouncycastle:bcpkix-jdk18on:${bouncycastle_version}",
            "net.portswigger.burp.extensions:montoya-api:${extender_version}",
            'org.junit.jupiter:junit-jupiter:5.11.2',
            'org.assertj:assertj-core:3.26.3',
            'org.mockito:mockito-core:5.14.1'
    )
}

tasks.withType(JavaCompile).configureEach {
    doLast {
        project.sourceSets.main.output.classesDirs.each { project.mkdir(it) }

        ant.taskdef name: 'javac2', classname: 'com.intellij.ant.Javac2', classpath: configurations.guiGenerationTask.asPath

        ant.javac2 srcdir: project.sourceSets.main.java.srcDirs.join(':'),
                classpath: project.sourceSets.main.compileClasspath.asPath,
                destdir: project.sourceSets.main.output.classesDirs.getSingleFile(),
                source: sourceCompatibility,
                target: targetCompatibility,
                includeAntRuntime: false
    }
}

test {
    useJUnitPlatform()
}

jar {
    dependsOn test
    archiveBaseName = project.name
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory()
                    ? it
                    : zipTree(it).matching({
                         exclude 'org/exbin/deltahex/swing/DefaultCodeAreaCommandHandler.class',
                                 'org/exbin/deltahex/swing/DefaultCodeAreaCommandHandler$1.class',
                                 'org/exbin/deltahex/swing/DefaultCodeAreaCommandHandler$2.class',
                                 'org/exbin/deltahex/swing/DefaultCodeAreaCommandHandler$BinaryDataClipboardData.class',
                                 'org/exbin/deltahex/swing/DefaultCodeAreaCommandHandler$ClipboardData.class',
                                 'org/exbin/deltahex/swing/DefaultCodeAreaCommandHandler$CodeDataClipboardData.class',
                                 'META-INF/LICENSE'
                    })
        }
    }
    from(rootDir) {
        include 'LICENSE.md'
        into 'META-INF'
    }
}
